<?xml version="1.0" encoding="UTF-8"?>
<!--
根据不同的日志系统，你可以按如下规则组织配置文件名，就能被正确加载：
Logback：logback-spring.xml, logback-spring.groovy, logback.xml, logback.groovy
Log4j：log4j-spring.properties, log4j-spring.xml, log4j.properties, log4j.xml
Log4j2：log4j2-spring.xml, log4j2.xml
JDK (Java Util Logging)：logging.properties

scan：当此属性设置为true时，配置文件如果发生改变，将会被重新加载，默认值为true。
scanPeriod：设置监测配置文件是否有修改的时间间隔，如果没有给出时间单位，默认单位是毫秒当scan为true时，此属性生效。默认的时间间隔为1分钟。
debug：当此属性设置为true时，将打印出logback内部日志信息，实时查看logback运行状态。默认值为false。

根节点<configuration>有5个子节点
    root\contextName\property\appender\loger
-->
<configuration scan="false" scanPeriod="60 seconds" debug="false">

    <!-- ********************************************************************************************** -->

    <!--
                              1.  <contextName> 设置上下文名称
      每个logger都关联到logger上下文，默认上下文名称为“default”。但可以使用设置成其他名字，用于区分不同应用程序的记录。
       一旦设置，不能修改,可以通过%contextName来打印日志上下文名称，一般来说我们不用这个属性，可有可无。
   -->
    <contextName>${appName}</contextName>


    <!-- ********************************************************************************************** -->


    <!--
                              2. <property> 设置变量
    用来定义变量值的标签， 有两个属性，name和value；其中name的值是变量的名称，value的值时变量定义的值。
  通过定义的值会被插入到logger上下文中。定义变量后，可以使“${}”来使用变量。
            <property name="logback.logdir" value="/Users/inke/dev/log/tomcat"/>
            <property name="logback.appname" value="app"/>
这里可以看后通过 application.yml 传递参数过来。
    -->
    <!-- 定义日志的根目录 -->
    <property name="LOG_HOME" value="/app/log" />
    <!-- 定义日志文件名称 -->
    <property name="appName" value="flightreservation"></property>


    <!-- ********************************************************************************************** -->

   <!--
                              3.<appender>
     appender用来格式化日志输出节点，有俩个属性name和class，class用来指定哪种输出策略，常用就是控制台输出策略和文件输出策略。
     控制台输出ConsoleAppender： ch.qos.logback.core.ConsoleAppender
     输出到文件 RollingFileAppender:  ch.qos.logback.core.rolling.RollingFileAppender

   -->
    <!-- ch.qos.logback.core.ConsoleAppender 表示控制台输出 -->
    <appender name="consoleLog" class="ch.qos.logback.core.ConsoleAppender">
        <!--
        日志输出格式：
			%d表示日期时间，
			%thread表示线程名，
			%-5level：级别从左显示5个字符宽度
			%logger{50} 表示logger名字最长50个字符，否则按照句点分割。 
			%msg：日志消息，
			%n是换行符
        -->
        <layout class="ch.qos.logback.classic.PatternLayout">
            <!--springProfile 是springboot高级特性，name=dev 指定的是开发环境，！dev指定不是开发环境 -->
            <springProfile name="dev">
                <pattern>date:%d{yyyy-MM-dd HH:mm:ss.SSS} |  thread:[%thread] |  printLevel:%-5level | info:%logger{50} - %msg%n</pattern>
            </springProfile>
            <springProfile name="!dev">
                <pattern>date:%d{yyyy-MM-dd HH:mm:ss.SSS} |  thread:[%thread] |  printLevel:%-5level | info:%logger{50} - %msg%n</pattern>
            </springProfile>
        </layout>

    </appender>

  <!--
                  输出到文件 RollingFileAppender
             另一种常见的日志输出到文件，随着应用的运行时间越来越长，日志也会增长的越来越多，
             将他们输出到同一个文件并非一个好办法。RollingFileAppender用于切分文件日志：
  -->
    <!-- 滚动记录文件，先将日志记录到指定文件，当符合某个条件时，将日志记录到其他文件 -->  
    <appender name="appLogAppender" class="ch.qos.logback.core.rolling.RollingFileAppender">

        <!--
        如果只是想要 Info 级别的日志，只是过滤 info 还是会输出 Error 日志，因为 Error 的级别高，
        所以我们使用下面的策略，可以避免输出 Error 的日志

       如果要区分 Info 和 Error 级别的日志，那么需要使用过滤规则的策略，代码注释写的很清楚

        如果只是想要 Info 级别的日志，只是过滤 info 还是会输出 Error 日志，因为 Error 的级别高，
        所以我们使用下面的策略，可以避免输出 Error 的日志

       如果要区分 Info 和 Error 级别的日志，那么需要使用过滤规则的策略，代码注释写的很清楚
        -->
        <!--如果只是想要 Error 级别的日志，那么需要过滤一下，默认是 info 级别的，ThresholdFilter-->

        <!--<filter class="ch.qos.logback.classic.filter.LevelFilter">-->
            <!--过滤 Error-->
            <!--<level>ERROR</level>-->
            <!--匹配到就禁止-->
            <!--<onMatch>DENY</onMatch>-->
            <!--没有匹配到就允许-->
            <!--<onMismatch>ACCEPT</onMismatch>-->
        <!--</filter>-->

        <!--
        日志名称，如果没有File 属性，那么只会使用FileNamePattern的文件路径规则
               如果同时有<File>和<FileNamePattern>，那么当天日志是<File>，明天会自动把今天
               的日志改名为今天的日期。即，<File> 的日志都是当天的。
           -->

        <!-- 指定日志文件的名称 -->
        <file>${LOG_HOME}/${appName}.log</file>
        <!--
        当发生滚动时，决定 RollingFileAppender 的行为，涉及文件移动和重命名
        TimeBasedRollingPolicy： 最常用的滚动策略，它根据时间来制定滚动策略，既负责滚动也负责出发滚动。
        -->
        <rollingPolicy class="ch.qos.logback.core.rolling.TimeBasedRollingPolicy">
            <!--
            滚动时产生的文件的存放位置及文件名称 %d{yyyy-MM-dd}：按天进行日志滚动 
            %i：当文件大小超过maxFileSize时，按照i进行文件滚动
            -->
            <fileNamePattern>${LOG_HOME}/${appName}-%d{yyyy-MM-dd}-%i.log</fileNamePattern>
            <!-- 
            可选节点，控制保留的归档文件的最大数量，超出数量就删除旧文件。假设设置每天滚动，
            且maxHistory是365，则只保存最近365天的文件，删除之前的旧文件。注意，删除旧文件是，
            那些为了归档而创建的目录也会被删除。
            -->
            <MaxHistory>365</MaxHistory>
            <!-- 
            当日志文件超过maxFileSize指定的大小是，根据上面提到的%i进行日志文件滚动
            注意此处配置SizeBasedTriggeringPolicy是无法实现按文件大小进行滚动的，必须配置timeBasedFileNamingAndTriggeringPolicy
            -->
            <timeBasedFileNamingAndTriggeringPolicy class="ch.qos.logback.core.rolling.SizeAndTimeBasedFNATP">
                <maxFileSize>100MB</maxFileSize>
            </timeBasedFileNamingAndTriggeringPolicy>
        </rollingPolicy>

        <!-- 日志输出格式： -->     
        <layout class="ch.qos.logback.classic.PatternLayout">
            <pattern>%d{yyyy-MM-dd HH:mm:ss.SSS} [ %thread ] - [ %-5level ] [ %logger{50} : %line ] - %msg%n%n</pattern>
        </layout>

    </appender>
    <!-- ********************************************************************************************** -->
    <!-- 
		logger主要用于存放日志对象，也可以定义日志类型、级别
		name：表示匹配的logger类型前缀，也就是包的前半部分
		level：要记录的日志级别，包括 TRACE < DEBUG < INFO < WARN < ERROR
		additivity：作用在于children-logger是否使用 rootLogger配置的appender进行输出，
		            没有设置addtivity，默认为true，将此loger的打印信息向上级传递；
		            additivity属性为false，表示此loger的打印信息不再向上级传递;
		false：表示只用当前logger的appender-ref，
		true：表示当前logger的appender-ref和rootLogger的appender-ref都有效
    -->
    <!-- hibernate logger -->
    <!--<logger name="com.yilvtong.first.frontdesk" level="debug" />-->
    <!-- Spring framework logger -->
    <!--<logger name="org.springframework" level="debug" additivity="false"></logger>-->

    <!-- 测试环境+开发环境. 多个使用逗号隔开. -->
    <springProfile name="test,dev">
        <logger name="com.yilvtong.first.flightreservation" level="DEBUG" additivity="false">
            <appender-ref ref="consoleLog"/>
        </logger>
        <logger name="org.springframework" level="debug" additivity="false">
            <appender-ref ref="consoleLog"/>
        </logger>
    </springProfile>

    <!-- 生产环境. -->
    <springProfile name="prod">
        <logger name="com.yilvtong.first.flightreservation" level="INFO" additivity="false">
            <appender-ref ref="consoleLog"/>
        </logger>
        <logger name="org.springframework" level="debug" additivity="false">
            <appender-ref ref="consoleLog"/>
        </logger>
    </springProfile>



<!-- ********************************************************************************************** -->

    <!--

      root节点是必选节点，用来指定最基础的日志输出级别，只有一个level属性。
      level:用来设置打印级别，大小写无关：TRACE, DEBUG, INFO, WARN, ERROR, ALL 和 OFF，不能设置为INHERITED或者同义词NULL。
   默认是DEBUG。可以包含零个或多个元素，标识这个appender将会添加到这个loger。

      root与logger是父子关系，没有特别定义则默认为root，任何一个类只会和一个logger对应，
    要么是定义的logger，要么是root，判断的关键在于找到这个logger，然后判断这个logger的appender和level。 
    -->
    <root level="info">
        <appender-ref ref="consoleLog" />
        <appender-ref ref="appLogAppender" />
    </root>
</configuration> 